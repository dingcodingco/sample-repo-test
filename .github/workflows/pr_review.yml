name: PR Auto Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]

jobs:
  review:
    # Skip draft PRs
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Claude Code Review
        id: claude_review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            You are reviewing PR #${{ github.event.pull_request.number }} in ${{ github.repository }}.

            Please perform a thorough code review focusing on:

            üîí **Security Issues**:
            - SQL injection vulnerabilities
            - XSS vulnerabilities
            - Exposed API keys or credentials
            - Insecure data handling
            - CORS and authentication issues

            üêõ **Potential Bugs**:
            - Null/undefined handling
            - Type mismatches
            - Logic errors
            - Edge cases

            üìä **Code Quality**:
            - Code clarity and readability
            - Maintainability
            - DRY principle violations
            - Proper error handling

            ‚ö° **Performance**:
            - Inefficient algorithms
            - Memory leaks
            - Unnecessary operations

            üìù **Best Practices**:
            - Adherence to language conventions
            - Proper documentation
            - Test coverage

            Please provide specific, actionable feedback. Point out the exact lines with issues.
            Use markdown formatting for clarity. Be constructive and helpful.

            If the code looks good overall, respond with "LGTM üëç" and highlight any particularly good practices you noticed.

      - name: Debug and Post Review Comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // List all files in /home/runner/work/_temp/
            console.log('Files in temp directory:');
            const tempFiles = fs.readdirSync('/home/runner/work/_temp/');
            console.log(tempFiles);

            // Try different possible output files
            const possibleFiles = [
              '/home/runner/work/_temp/claude-execution-output.json',
              '/tmp/claude-execution-output.json',
              './claude-execution-output.json'
            ];

            let reviewContent = null;

            for (const filePath of possibleFiles) {
              try {
                if (fs.existsSync(filePath)) {
                  console.log(`Found file: ${filePath}`);
                  const content = fs.readFileSync(filePath, 'utf8');
                  const data = JSON.parse(content);
                  console.log('File keys:', Object.keys(data));

                  if (data.result) {
                    reviewContent = data.result;
                    console.log('Found review content');
                    break;
                  }
                }
              } catch (error) {
                console.log(`Error reading ${filePath}:`, error.message);
              }
            }

            // Check if Claude step has outputs
            console.log('Context object keys:', Object.keys(context));
            console.log('GitHub context keys:', Object.keys(github));

            if (reviewContent) {
              try {
                const comment = await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `## ü§ñ AI Code Review by Claude\n\n${reviewContent}\n\n---\n*This review was generated automatically by Claude AI*`
                });
                console.log('Review comment posted successfully!');
                console.log('Comment URL:', comment.data.html_url);
              } catch (error) {
                console.error('Error posting comment:', error);
              }
            } else {
              console.log('No review content found in any output file');
              // Post a simple comment anyway to test
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: '## ü§ñ Test Comment\n\nClaude AI review workflow is working, but could not extract review content. Check workflow logs for details.'
                });
                console.log('Test comment posted successfully!');
              } catch (error) {
                console.error('Error posting test comment:', error);
              }
            }